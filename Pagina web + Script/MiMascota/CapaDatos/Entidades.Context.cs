//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace CapaEntidades
{
    public partial class EF_Pagina : ObjectContext
    {
        public const string ConnectionString = "name=EF_Pagina";
        public const string ContainerName = "EF_Pagina";
    
        #region Constructors
    
        public EF_Pagina()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public EF_Pagina(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public EF_Pagina(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // La creación de servidores proxy requiere el uso de ProxyDataContractResolver y
            // puede permitir la carga diferida que puede expandir el gráfico durante la serialización.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region Propiedades de ObjectSet
    
        public ObjectSet<Administrador> Administrador
        {
            get { return _administrador  ?? (_administrador = CreateObjectSet<Administrador>("Administrador")); }
        }
        private ObjectSet<Administrador> _administrador;
    
        public ObjectSet<Mascota> Mascota
        {
            get { return _mascota  ?? (_mascota = CreateObjectSet<Mascota>("Mascota")); }
        }
        private ObjectSet<Mascota> _mascota;
    
        public ObjectSet<Publicacion> Publicacion
        {
            get { return _publicacion  ?? (_publicacion = CreateObjectSet<Publicacion>("Publicacion")); }
        }
        private ObjectSet<Publicacion> _publicacion;
    
        public ObjectSet<Usuario> Usuario
        {
            get { return _usuario  ?? (_usuario = CreateObjectSet<Usuario>("Usuario")); }
        }
        private ObjectSet<Usuario> _usuario;

        #endregion
        #region Importaciones de funciones
        public virtual ObjectResult<Usuario> ListarUsuarios()
        {
            return base.ExecuteFunction<Usuario>("ListarUsuarios");
        }

        #endregion
    }
}
