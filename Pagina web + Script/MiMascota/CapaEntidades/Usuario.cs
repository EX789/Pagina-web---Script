//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace CapaEntidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Administrador))]
    [KnownType(typeof(Publicacion))]
    public partial class Usuario: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int id_usuario
        {
            get { return _id_usuario; }
            set
            {
                if (_id_usuario != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'id_usuario' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _id_usuario = value;
                    OnPropertyChanged("id_usuario");
                }
            }
        }
        private int _id_usuario;
    
        [DataMember]
        public string nombre_usuario
        {
            get { return _nombre_usuario; }
            set
            {
                if (_nombre_usuario != value)
                {
                    _nombre_usuario = value;
                    OnPropertyChanged("nombre_usuario");
                }
            }
        }
        private string _nombre_usuario;
    
        [DataMember]
        public string apellido_usuario
        {
            get { return _apellido_usuario; }
            set
            {
                if (_apellido_usuario != value)
                {
                    _apellido_usuario = value;
                    OnPropertyChanged("apellido_usuario");
                }
            }
        }
        private string _apellido_usuario;
    
        [DataMember]
        public int edad_usuario
        {
            get { return _edad_usuario; }
            set
            {
                if (_edad_usuario != value)
                {
                    _edad_usuario = value;
                    OnPropertyChanged("edad_usuario");
                }
            }
        }
        private int _edad_usuario;
    
        [DataMember]
        public string correo_usuario
        {
            get { return _correo_usuario; }
            set
            {
                if (_correo_usuario != value)
                {
                    _correo_usuario = value;
                    OnPropertyChanged("correo_usuario");
                }
            }
        }
        private string _correo_usuario;
    
        [DataMember]
        public string login_usuario
        {
            get { return _login_usuario; }
            set
            {
                if (_login_usuario != value)
                {
                    _login_usuario = value;
                    OnPropertyChanged("login_usuario");
                }
            }
        }
        private string _login_usuario;
    
        [DataMember]
        public string password_usuario
        {
            get { return _password_usuario; }
            set
            {
                if (_password_usuario != value)
                {
                    _password_usuario = value;
                    OnPropertyChanged("password_usuario");
                }
            }
        }
        private string _password_usuario;
    
        [DataMember]
        public Nullable<int> Administrador_id
        {
            get { return _administrador_id; }
            set
            {
                if (_administrador_id != value)
                {
                    ChangeTracker.RecordOriginalValue("Administrador_id", _administrador_id);
                    if (!IsDeserializing)
                    {
                        if (Administrador != null && Administrador.id_administrador != value)
                        {
                            Administrador = null;
                        }
                    }
                    _administrador_id = value;
                    OnPropertyChanged("Administrador_id");
                }
            }
        }
        private Nullable<int> _administrador_id;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public Administrador Administrador
        {
            get { return _administrador; }
            set
            {
                if (!ReferenceEquals(_administrador, value))
                {
                    var previousValue = _administrador;
                    _administrador = value;
                    FixupAdministrador(previousValue);
                    OnNavigationPropertyChanged("Administrador");
                }
            }
        }
        private Administrador _administrador;
    
        [DataMember]
        public TrackableCollection<Publicacion> Publicacion
        {
            get
            {
                if (_publicacion == null)
                {
                    _publicacion = new TrackableCollection<Publicacion>();
                    _publicacion.CollectionChanged += FixupPublicacion;
                }
                return _publicacion;
            }
            set
            {
                if (!ReferenceEquals(_publicacion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_publicacion != null)
                    {
                        _publicacion.CollectionChanged -= FixupPublicacion;
                    }
                    _publicacion = value;
                    if (_publicacion != null)
                    {
                        _publicacion.CollectionChanged += FixupPublicacion;
                    }
                    OnNavigationPropertyChanged("Publicacion");
                }
            }
        }
        private TrackableCollection<Publicacion> _publicacion;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Administrador = null;
            Publicacion.Clear();
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupAdministrador(Administrador previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Usuario.Contains(this))
            {
                previousValue.Usuario.Remove(this);
            }
    
            if (Administrador != null)
            {
                if (!Administrador.Usuario.Contains(this))
                {
                    Administrador.Usuario.Add(this);
                }
    
                Administrador_id = Administrador.id_administrador;
            }
            else if (!skipKeys)
            {
                Administrador_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Administrador")
                    && (ChangeTracker.OriginalValues["Administrador"] == Administrador))
                {
                    ChangeTracker.OriginalValues.Remove("Administrador");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Administrador", previousValue);
                }
                if (Administrador != null && !Administrador.ChangeTracker.ChangeTrackingEnabled)
                {
                    Administrador.StartTracking();
                }
            }
        }
    
        private void FixupPublicacion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Publicacion item in e.NewItems)
                {
                    item.Usuario = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Publicacion", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Publicacion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Usuario, this))
                    {
                        item.Usuario = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Publicacion", item);
                    }
                }
            }
        }

        #endregion
    }
}
